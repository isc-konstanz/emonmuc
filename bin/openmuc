#!/usr/bin/env bash
#Scriptname: openmuc
#Description: script to start, stop, restart and reload OpenMUC
OPENMUC_HOME="/opt/openmuc"

# Add JVM options here.
JVM_OPTS=""

# Set location for PID and Error output file. Default is "$EMONMUC_DIR/log/openmuc.pid" or ".log"
PID_FILE=/var/run/openmuc/openmuc.pid
#ERR_FILE=/var/log/openmuc/openmuc.out
ERR_FILE=/dev/null

cd "$OPENMUC_HOME"

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Apache Felix FileInstall
# Since FileInstall doesn't create the felix.fileinstall.dir by itself, this script creates
# the folder. If the folder doesn't exist the org.apache.felix.fileinstall bundle will throw null pointer
# exception at start.
# The folder should be specified in system.properties e.g: felix.fileinstall.dir=conf/properties
# If the property is missing then the default folder "load" for Felix FileInstall is created in "framework/load"
create_install_dir(){

    SYSPROP=$OPENMUC_HOME/conf/system.properties
    FILE_INSTALL_KEY="felix.fileinstall.dir"
    FILE_INSTALL_VALUE=`grep $FILE_INSTALL_KEY $SYSPROP | sed "s/${FILE_INSTALL_KEY}.*=//;s/^[ \t]*//g"`
    FILE_INSTALL_FOLDER_DEFAULT=/load

    # if FILE_INSTALL_VALUE exists in system.properties
    if [ -n "$FILE_INSTALL_VALUE" ]; then

        # check if string is relative path
        if [[ $FILE_INSTALL_VALUE = /* ]]; then
            FILE_INSTALL_FOLDER=$FILE_INSTALL_VALUE
        else
            FILE_INSTALL_FOLDER=$OPENMUC_HOME"/"$FILE_INSTALL_VALUE
        fi

        # check if the folder already exists
        if test -e "$FILE_INSTALL_FOLDER"; then
           echo "Felix FileInstall folder already exists: $FILE_INSTALL_FOLDER"
        else
            # create folder if it doesn't exist
            mkdir -p $FILE_INSTALL_FOLDER
            if test -e "$FILE_INSTALL_FOLDER"; then
                echo "Felix FileInstall folder created: $FILE_INSTALL_FOLDER"
            else
                echo "ERROR: unable to create Felix FileInstall $FILE_INSTALL_FOLDER. Try to create folder manually and start OpenMUC again."
                exit 1
            fi
        fi
    else
        # create default Felix FileInstall folder "load"
        mkdir -p $OPENMUC_HOME$FILE_INSTALL_FOLDER_DEFAULT
    fi
}


#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was not running
        #   2 if daemon could not be stopped (likely because kill level was too low)
        #   3 if user has no right to stop the daemon

    if [ ! -e $PID_FILE ]; then
        return 1
    fi

    #TODO check if PID from file matches a java felix process

    TMP_PID=`cat $PID_FILE`

    if ! ps -p "${TMP_PID}" >/dev/null 2>&1;
    then
        rm -f $PID_FILE
        return 1
    fi
    
    if ! kill -0 "${TMP_PID}" >/dev/null 2>&1;
    then
        return 3
    fi
    
    if [ "$2" = "-f" ]
    then
        kill -9 $TMP_PID >/dev/null 2>&1
        RET_STATUS=$?
    else
        kill $TMP_PID >/dev/null 2>&1
        RET_STATUS=$?
    fi

    if [ $RET_STATUS -ne 0 ]; then
        return 2
    fi


    local i=0        
        while kill -0 "${TMP_PID}" 2> /dev/null;  do
            if [ $i = '5' ]; then
                return 2
            fi
            echo -n "."
            sleep 1
            i=$(($i+1))
        done

    rm -f $PID_FILE
    return 0
}


stop() {
    echo -n "Stopping OpenMUC"
        do_stop

    RET_STATUS=$?
    echo ""
        case "$RET_STATUS" in
                0)
            echo "done"
                        exit 0
                ;;
                1)
            echo "No OpenMUC process is running"
                        exit 1
                ;;
                2)
            echo "Unable to stop OpenMUC, try -f flag to kill by brute force"
                        exit 2
                ;;
                3)
            echo "Unable to stop OpenMUC, user has no permission to stop process."
                        exit 3
                ;;                        

    esac
}


start() {

    create_install_dir

    if [ -f $PID_FILE ]; then
        if ps -p `cat $PID_FILE` > /dev/null
        then
            echo "OpenMUC is already running. Stop it first before running OpenMUC again."
            exit 2
        else
            rm -f $PID_FILE
        fi
    fi

    #echo -e "\e[96m\e[1m$(cat $OPENMUC_HOME/bin/welcome.txt)\e[0m"

    if [ "$2" != "-fg" ]
    then
        echo "Starting in background. To start OpenMUC in foreground run this script with the -fg flag."
        # Option: -Dgosh.args=--nointeractive is necessary for running openmuc in background
        exec "$JAVACMD" $JVM_OPTS -Dgosh.args=--nointeractive -jar "$OPENMUC_HOME"/bin/felix.jar >"$ERR_FILE" 2>&1 &
    else
        exec "$JAVACMD" $JVM_OPTS -jar "$OPENMUC_HOME"/bin/felix.jar
    fi

    if [ $? = 0 ]; then
        # save PID of the openmuc background process
        echo $! > $PID_FILE
        exit 0;
    else
        exit 1;
    fi
    echo "done"
}


case "$1" in
    start)
        start $*
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 10
        start $*
        ;;
    remote-shell)
        echo "Using telnet to connect to remote shell at 127.0.0.1:6666"
        echo "Press ctrl+d to close connection"
        exec telnet 127.0.0.1 6666
        ;;
    reload)
        echo "reaload configuration"
        { echo "openmuc:reload"; sleep 1; } | telnet localhost 6666
        ;;
    *)
        echo "Usage: openmuc {start|stop|restart|reload|remote-shell}"
        exit 1
        ;;
esac
exit 0
